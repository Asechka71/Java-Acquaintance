import java.util.*;
public class Main {
    public static void main(String[] args) {
//  1.Объявить и инициализировать экземпляр класса HashSet. Обобщение String.
        HashSet<String> set = new HashSet<>();
//  2.Добавить пять элементов в множество.
        set.add("one");
        set.add("two");
        set.add("three");
        set.add("four");
        set.add("five");
        System.out.println(set);
//  3.Отсортировать значения используя итератор.
        if (!set.isEmpty()){
            Iterator<String> it = set.iterator();
            while (it.hasNext()){
                System.out.println(it.next());
            }
        }
        Iterator<String> it = set.iterator();
        ArrayList<String> ar = new ArrayList();
        while (it.hasNext()){
            ar.add(it.next());
        }
        Collections.sort(ar);
//  4.Отсортированный результат сохранить в LinkedHashSet
        LinkedHashSet<String> set1 = new LinkedHashSet<>();
        for (int i = 0; i < ar.size(); i++) {
            set1.add(String.valueOf(ar.get(i)));
        }
        System.out.println(set1);
//  5.Создать TreeSet с компаратором.
        TreeSet<String>set2 = new TreeSet<>(new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                if (o1.equals(o2)) { return 0;}
                if (o1.compareTo(o2)>0) {return 1;}
                else return -1;
            }
        });
//  6.Скопировать содержимое первого множества (HashSet) в TreeSet.
        for (int i = 0; i < ar.size(); i++) {
            set2.add(String.valueOf(ar.get(i)));
        }
        System.out.println(set2);
    }
}
